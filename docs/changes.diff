# 
# Copyright (c) 2016, Juniper Networks Inc.
# All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
#
#
# These are the changes to the sources that were generated by Perl Catalyst
# version 5.90077.
diff -rup bl-oss-generated-src/web/BranchLocker/Makefile.PL bl-oss/web/BranchLocker/Makefile.PL
--- bl-oss-generated-src/web/BranchLocker/Makefile.PL	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/Makefile.PL	2016-01-20 17:28:23.000000000 -0800
@@ -1,4 +1,23 @@
-#!/usr/bin/env perl
+#!/usr/bin/perl
+
+# 2016-01-20 - The above line was changed to #!/usr/bin/perl
+#     - justinb@juniper.net
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 # IMPORTANT: if you delete this file your app will not work as
 # expected.  You have been warned.
 use inc::Module::Install 1.02;
@@ -9,14 +28,27 @@ use Module::Install::Catalyst; # Complai
 name 'BranchLocker';
 all_from 'lib/BranchLocker.pm';
 
-requires 'Catalyst::Runtime' => '5.90077';
-requires 'Catalyst::Plugin::ConfigLoader';
-requires 'Catalyst::Plugin::Static::Simple';
-requires 'Catalyst::Action::RenderView';
-requires 'Moose';
-requires 'namespace::autoclean';
-requires 'Config::General'; # This should reflect the config file format you've chosen
-                 # See Catalyst::Plugin::ConfigLoader for supported formats
+requires 'Catalyst::Runtime'                => '5.90077';
+requires 'Catalyst::Plugin::ConfigLoader'   => '0.34';
+requires 'Catalyst::Plugin::Static::Simple' => '0.33';
+requires 'Catalyst::Action::RenderView'     => '0.16';
+requires 'Catalyst::View::TT'               => '0.41';
+requires 'Catalyst::Controller::REST'       => '1.17';
+requires 'Catalyst::Model::DBIC::Schema'    => '0.65';
+requires 'Catalyst::Plugin::Authentication' => '0.10023';
+requires 'DBD::SQLite'                      => '1.40';
+requires 'DBD::Pg'                          => '3.4.2';
+requires 'DBIx::Class'                      => '0.08270';
+requires 'FCGI'                             => '0';
+requires 'JSON::Tiny'                       => '0';
+requires 'Test::Pod::Coverage'              => '1.04';
+requires 'Moose'                            => '2.1202';
+requires 'MooseX::NonMoose'                 => '0.25';
+requires 'namespace::autoclean'             => '0.22';
+requires 'Config::General'                  => '2.56';
+# This should reflect the config file format you've chosen
+# See Catalyst::Plugin::ConfigLoader for supported formats
+
 test_requires 'Test::More' => '0.88';
 catalyst;
 
diff -rup bl-oss-generated-src/web/BranchLocker/README bl-oss/web/BranchLocker/README
--- bl-oss-generated-src/web/BranchLocker/README	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/README	2016-01-20 17:44:13.000000000 -0800
@@ -1 +1,25 @@
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+Build Instructions:
+perl Makefile.PL
+make
+make test
+
+The following is the contents of the file generated by the Perl Catalyst
+module version '5.90077'.
+==============================================================================
 Run script/branchlocker_server.pl to test the application.
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/API.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/API.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/API.pm	2016-02-19 17:04:48.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/API.pm	2016-01-20 18:00:44.000000000 -0800
@@ -1,46 +1,268 @@
-package BranchLocker::Controller::API;
-use Moose;
-use namespace::autoclean;
 
-BEGIN { extends 'Catalyst::Controller'; }
+=encoding utf8
+
+=head1 AUTHOR
+
+Justin Bellomi
 
 =head1 NAME
 
-BranchLocker::Controller::API - Catalyst Controller
+BranchLocker::Controller::API - REST API.
 
 =head1 DESCRIPTION
 
-Catalyst Controller.
+The REST API for Branch Locker.
 
-=head1 METHODS
+=head1 LICENSE
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
 =cut
 
+package BranchLocker::Controller::API;
+use Moose;
+use namespace::autoclean;
+
+use Branch::Locker;
 
-=head2 index
+BEGIN { extends 'Catalyst::Controller::REST'; }
+
+=head1 METHODS
 
 =cut
 
-sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+__PACKAGE__->config(
+    'default'   => 'application/json',
+    'map'       => {
+        'application/json' => 'JSON',
+    },
+);
+
+sub exit_readonly :Private {
+    my ($self, $c) = @_;
+
+    $self->status_forbidden($c,
+        'message' => 'Branch Locker is in read only mode.',
+    );
 
-    $c->response->body('Matched BranchLocker::Controller::API in API.');
+    $c->detach;
 }
 
+sub begin :ActionClass('Deserialize') {
+    my ($self, $c) = @_;
 
+    # Validate API key.
+    my $api_key     = $c->req->header('X-API-Key');
+    my $api_key_ref = $c->validate_api_key($api_key);
+    if (! defined $api_key_ref) {
+        # Unauthorized redirect to help.
+        my $status = 403;
+        my $error_string = "You are not authorized to use the REST API.";
+
+        my $errors = $c->stash->{'errors'};
+        if (exists $c->stash->{'errors'} && scalar @$errors) {
+            $status = 500;
+            $error_string = join ("\n", @$errors);
+        }
+
+        $c->res->status($status);
+        $c->res->body($error_string);
+        $c->detach;
+    }
 
-=encoding utf8
+    $c->stash->{'api_key_ref'} = $api_key_ref;
+}
 
-=head1 AUTHOR
+sub check_for_errors :Private {
+    my ($data_ref, $self, $c) = @_;
 
-Justin Bellomi
+    if (exists $data_ref->{'errors'}) {
+        my $errors_ref = $data_ref->{'errors'};
+        if (scalar @$errors_ref) {
+            my $errors_string = join("\n", @$errors_ref);
+            my $error_code = $data_ref->{'http_error_code'} || 400;
+            # Respond with error messages.
+            $c->res->status($error_code);
+            $c->res->body(<<ERRORS);
+Encountered Errors:
+$errors_string
+ERRORS
+            $c->detach;
+        }
+    }
+}
 
-=head1 LICENSE
+sub api :Global {}
 
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
+sub api_help :Local :Path(0) {
+    my ($self, $c) = @_;
 
-=cut
+    $self->status_ok($c, entity => {
+        'API Help' => 'There is no help defined.',
+    });
+
+    $c->detach;
+}
+
+sub legacy_lock :Local :ActionClass('REST') {}
+
+sub legacy_lock_GET {
+    my ($self, $c) = @_;
+
+    my $criteria_ref = $c->req->parameters;
+    my $locks_ref = Branch::Locker::get_locks($criteria_ref);
+
+    $self->status_ok($c, entity => $locks_ref);
+}
+
+sub legacy_lock_PUT {
+    my ($self, $c) = @_;
+
+    my $criteria_ref          = $c->req->data->{'criteria'         };
+    my $data_manipulation_ref = $c->req->data->{'data_manipulation'};
+
+    my $user = $data_manipulation_ref->{'as-user'};
+    exit_readonly($self, $c) if ($c->is_readonly($user));
+
+    my $auto_create_lock      = $data_manipulation_ref->{'auto-create-lock'};
+    my $locks_ref = Branch::Locker::get_locks($criteria_ref);
+
+    # Create a lock if no locks were found.
+    if (! scalar @$locks_ref) {
+        my $branchname = $criteria_ref->{'branch'};
+        if ($auto_create_lock
+            && defined $branchname
+            && $branchname ne q{}) {
+            my $data_ref = {
+                'name'      => $branchname,
+                'message'   => 'Auto Created Lock - No Message Supplied.',
+                'is_active' => 1,
+                'is_open'   => 0,
+            };
+
+            my $value = undef;
+
+            $value = $data_manipulation_ref->{'as-user'         };
+            $data_ref->{'as-user'      } = $value if (defined $value);
+
+            $value = $data_manipulation_ref->{'add-users'       };
+            $data_ref->{'allowed-users'} = $value if (defined $value);
+
+            $value = $data_manipulation_ref->{'add-prs'         };
+            $data_ref->{'allowed-prs'  } = $value if (defined $value);
+
+            $value = $data_manipulation_ref->{'add-gate-keepers'};
+            $data_ref->{'gate-keepers' } = $value if (defined $value);
+
+            $value = $data_manipulation_ref->{'replace-message' };
+            $data_ref->{'message'      } = $value if (defined $value);
+
+            my $audit_transaction_ref = Branch::Locker::create_lock(
+                $c->stash->{'api_key_ref'},
+                $data_ref,
+            );
+            check_for_errors($audit_transaction_ref, $self, $c);
+
+            my $lock_ref = $audit_transaction_ref->{'result'};
+
+            my $path = $branchname eq 'HEAD' ? '/trunk/'
+                     :                         "/branches/$branchname/"
+                     ;
+
+            my $location_ref = Branch::Locker::find_or_create_location_from_path_and_repository(
+                $path,
+                'example-repository'
+            );
+
+            Branch::Locker::link_location_to_lock($location_ref, $lock_ref);
+
+            $self->status_ok($c, entity => $lock_ref);
+        }
+        elsif (! $auto_create_lock) {
+            my $error_message = <<ERROR;
+No locks found for editing.
+
+Set the 'auto-create-lock' sub key under the data_manipulation key
+to auto-create a lock.
+ERROR
+            my $error = {
+                'errors'          => [$error_message],
+                'http_error_code' => 400,
+            };
+            check_for_errors($error, $self, $c);
+        }
+        else {
+            my $error_message = <<ERROR;
+To auto-create a lock the 'branch' sub key must be defined under the
+'criteria' key and it must not be blank.
+ERROR
+            my $error = {
+                'errors'          => [$error_message],
+                'http_error_code' => 400,
+            };
+            check_for_errors($error, $self, $c);
+        }
+    }
+    else {
+        my $result = Branch::Locker::edit_locks(
+            $c->stash->{'api_key_ref'},
+            $locks_ref,
+            $data_manipulation_ref
+        );
+        check_for_errors($result, $self, $c);
+
+        $self->status_ok($c, entity => $result);
+    }
+}
+
+sub location :Local :ActionClass('REST') {}
+
+sub location_GET {
+    my ($self, $c) = @_;
+
+    my $locations
+        = Branch::Locker::get_locations_from_locks($c->req->parameters->{'id'})
+        || [];
+
+    $self->status_ok($c, entity => $locations);
+}
+
+sub echo :Local :ActionClass('REST') {}
+
+sub echo_GET {
+    my ($self, $c) = @_;
+
+    $self->status_ok($c, entity => $c->req->parameters);
+}
+
+sub echo_POST {
+    my ($self, $c) = @_;
+
+    exit_readonly($self, $c) if ($c->is_readonly);
+
+    $self->status_ok($c, entity => $c->req->data);
+}
+
+sub echo_PUT {
+    my ($self, $c) = @_;
+
+    exit_readonly($self, $c) if ($c->is_readonly);
+    
+    $self->status_ok($c, entity => $c->req->data);
+}
 
 __PACKAGE__->meta->make_immutable;
 
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/EditEnforcement.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/EditEnforcement.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/EditEnforcement.pm	2016-02-19 17:04:57.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/EditEnforcement.pm	2016-01-11 17:06:02.000000000 -0800
@@ -1,8 +1,5 @@
-package BranchLocker::Controller::EditEnforcement;
-use Moose;
-use namespace::autoclean;
 
-BEGIN { extends 'Catalyst::Controller'; }
+=encoding utf8
 
 =head1 NAME
 
@@ -12,35 +9,386 @@ BranchLocker::Controller::EditEnforcemen
 
 Catalyst Controller.
 
-=head1 METHODS
+=head1 AUTHOR
+
+Justin Bellomi
+
+=head1 LICENSE
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
 =cut
 
+package BranchLocker::Controller::EditEnforcement;
+use Moose;
+use namespace::autoclean;
 
-=head2 index
+BEGIN { extends 'Catalyst::Controller'; }
+
+=head1 METHODS
 
 =cut
 
-sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+=head2 index
 
-    $c->response->body('Matched BranchLocker::Controller::EditEnforcement in EditEnforcement.');
-}
+=cut
 
+my $EMPTY_STR = q{};
 
+sub edit_enforcement :Global {
+    my ($self, $c) = @_;
 
-=encoding utf8
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user();
+    my $parameters  = $c->req->parameters;
+
+    if (! exists $parameters->{'id'}) {
+        $c->response->redirect($c->uri_for('/'));
+        $c->detach;
+    }
+
+    if ($c->is_readonly) {
+        $c->stash->{'messages'} = 'Branch Locker is now in read only mode.';
+        BranchLocker::Controller::Lock::lock(@_);
+        $c->detach;
+    }
+
+    my $enforcements_ref = Branch::Locker::get_enforcements($parameters);
+
+    my @enforcements = @$enforcements_ref;
+    my $enforcement = $enforcements[0];
+
+    if ($enforcement->{'is_enabled'}) {
+        $enforcement->{'is_enabled_value' } = 1;
+        $enforcement->{'is_enabled'       } = 'checked';
+        $enforcement->{'enabled_class'    } = 'enabled';
+    }
+    else {
+        $enforcement->{'is_enabled_value' } = 0;
+        $enforcement->{'is_enabled'       } = '';
+        $enforcement->{'enabled_class'    } = 'disabled';
+    }
+
+    # Can the user edit the enforcement?
+    # We don't care about the errors here.
+    my $user_can_edit = Branch::Locker::can_edit_enforcement_as_user(
+            $enforcement,
+            $user,
+            [],
+        );
+
+    # Can the user enable the enforcement?
+    # We don't care about the errors here.
+    my $user_can_enable = Branch::Locker::can_enable_enforcement_as_user(
+            $enforcement,
+            $user,
+            [],
+        );
+
+    my $user_is_admin = Branch::Locker::is_user_an_admin($user);
+
+    my $can_edit   = $user_can_edit   ? $EMPTY_STR : 'disabled';
+    my $can_enable = $user_can_enable ? $EMPTY_STR : 'disabled';
+    my $admin_only = $user_is_admin   ? $EMPTY_STR : 'disabled';
+    my $can_submit = $user_can_edit || $user_can_enable
+                   ? $EMPTY_STR
+                   : 'disabled'
+                   ;
+
+    $c->stash->{'can_edit'    } = $can_edit;
+    $c->stash->{'can_enable'  } = $can_enable;
+    $c->stash->{'admin_only'  } = $admin_only;
+    $c->stash->{'can_submit'  } = $can_submit;
+    $c->stash->{'from_lock_id'} = $parameters->{'from_lock_id'};
+    $c->stash->{'enforcement' } = $enforcement;
+    $c->stash->{'template'    } = 'edit-enforcement.tt2';
+}
 
-=head1 AUTHOR
+sub submit_edit_enforcement :Global {
+    my ($self, $c) = @_;
 
-Justin Bellomi
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user();
+    my $parameters  = $c->req->parameters;
+
+    if (! exists $parameters->{'id'}) {
+        $c->response->redirect($c->uri_for('/'));
+        $c->detach;
+    }
+
+    if ($c->is_readonly) {
+        $c->stash->{'errors'} = <<ERROR;
+Branch Locker was put into read only mode, your edits have been discarded.
+ERROR
+        BranchLocker::Controller::Lock::lock(@_);
+        $c->detach;
+    }
+
+    my $id                       = $parameters->{'id'                      };
+    my $from_lock_id             = $parameters->{'from_lock_id'            };
+
+    my $old_name                 = $parameters->{'old_name'                }
+                                 || $EMPTY_STR;
+
+    my $new_name                 = $parameters->{'new_name'                }
+                                 || $EMPTY_STR;
+
+    my $old_is_enabled           = $parameters->{'old_is_enabled'          }
+                                 || $EMPTY_STR;
+    my $new_is_enabled           = $parameters->{'new_is_enabled'          }
+                                 || $EMPTY_STR;
+
+    my $old_users_who_can_enable = $parameters->{'old_users_who_can_enable'}
+                                 || $EMPTY_STR;
+    my $new_users_who_can_enable = $parameters->{'new_users_who_can_enable'}
+                                 || $EMPTY_STR;
+
+    my $old_users_who_can_edit   = $parameters->{'old_users_who_can_edit'  }
+                                 || $EMPTY_STR;
+    my $new_users_who_can_edit   = $parameters->{'new_users_who_can_edit'  }
+                                 || $EMPTY_STR;
+
+    my $old_allowed_users        = $parameters->{'old_allowed_users'       }
+                                 || $EMPTY_STR;
+    my $new_allowed_users        = $parameters->{'new_allowed_users'       }
+                                 || $EMPTY_STR;
+
+    my $old_allowed_prs          = $parameters->{'old_allowed_prs'         }
+                                 || $EMPTY_STR;
+    my $new_allowed_prs          = $parameters->{'new_allowed_prs'         }
+                                 || $EMPTY_STR;
+
+    # Detect Changes.
+    my $changes = {};
+
+    $changes->{'name'} = $new_name if ($old_name ne $new_name);
+
+    $changes->{'is_enabled'} = $new_is_enabled
+        if ($old_is_enabled ne $new_is_enabled);
+
+    my ($added_users_who_can_enable, $removed_users_who_can_enable)
+        = Branch::Locker::get_added_and_removed_values(
+            $old_users_who_can_enable, $new_users_who_can_enable
+    );
+
+    $changes->{'add-users-who-can-enable'} = $added_users_who_can_enable
+        if (scalar @$added_users_who_can_enable);
+
+    $changes->{'remove-users-who-can-enable'} = $removed_users_who_can_enable
+        if (scalar @$removed_users_who_can_enable);
+
+    my ($added_users_who_can_edit, $removed_users_who_can_edit)
+        = Branch::Locker::get_added_and_removed_values(
+            $old_users_who_can_edit, $new_users_who_can_edit
+    );
+
+    $changes->{'add-users-who-can-edit'} = $added_users_who_can_edit
+        if (scalar @$added_users_who_can_edit);
+
+    $changes->{'remove-users-who-can-edit'} = $removed_users_who_can_edit
+        if (scalar @$removed_users_who_can_edit);
+
+    my ($added_allowed_users, $removed_allowed_users)
+        = Branch::Locker::get_added_and_removed_values(
+            $old_allowed_users, $new_allowed_users
+    );
+
+    $changes->{'add-allowed-users'} = $added_allowed_users
+        if (scalar @$added_allowed_users);
+
+    $changes->{'remove-allowed-users'} = $removed_allowed_users
+        if (scalar @$removed_allowed_users);
+
+    my ($added_allowed_prs, $removed_allowed_prs)
+        = Branch::Locker::get_added_and_removed_values(
+            $old_allowed_prs, $new_allowed_prs
+    );
+
+    $changes->{'add-allowed-prs'} = $added_allowed_prs
+        if (scalar @$added_allowed_prs);
+
+    $changes->{'remove-allowed-prs'} = $removed_allowed_prs
+        if (scalar @$removed_allowed_prs);
+
+    $changes->{'as-user'} = $user;
+    my $enforcements_ref = Branch::Locker::get_enforcements({ 'id' => $id });
+    my $audit_transaction = Branch::Locker::edit_enforcements(
+        $api_key_ref,
+        $enforcements_ref,
+        $changes,
+    );
+
+    if (exists $audit_transaction->{'errors'}) {
+        $c->stash->{'errors'      } = $audit_transaction->{'errors'};
+    }
+    else {
+        $c->stash->{'messages'    } = 'Edit successful.';
+    }
 
-=head1 LICENSE
+    edit_enforcement(@_);
+}
 
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
+sub submit_legacy_edit_lock :Global {
+    my ($self, $c) = @_;
 
-=cut
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user();
+    my $parameters  = $c->req->parameters;
+
+    if (! exists $parameters->{'id'}
+        || ! exists $parameters->{'from_lock_id'}) {
+        $c->response->redirect($c->uri_for('/'));
+        $c->detach;
+    }
+
+    if ($c->is_readonly) {
+        $c->stash->{'errors'} = <<ERROR;
+Branch Locker was put into read only mode, your edits have been discarded.
+ERROR
+        BranchLocker::Controller::Lock::lock(@_);
+        $c->detach;
+    }
+
+    my $id                       = $parameters->{'id'                      };
+    my $from_lock_id             = $parameters->{'from_lock_id'            };
+
+    my $old_name                 = $parameters->{'old_name'                }
+                                 || $EMPTY_STR;
+
+    my $new_name                 = $parameters->{'new_name'                }
+                                 || $EMPTY_STR;
+
+    my $old_is_enabled           = $parameters->{'old_is_enabled'          }
+                                 || $EMPTY_STR;
+    my $new_is_enabled           = $parameters->{'new_is_enabled'          }
+                                 || $EMPTY_STR;
+
+    my $old_users_who_can_enable = $parameters->{'old_users_who_can_enable'}
+                                 || $EMPTY_STR;
+    my $new_users_who_can_enable = $parameters->{'new_users_who_can_enable'}
+                                 || $EMPTY_STR;
+
+    my $old_users_who_can_edit   = $parameters->{'old_users_who_can_edit'  };
+    my $new_users_who_can_edit   = $parameters->{'new_users_who_can_edit'  };
+
+    my $old_allowed_users        = $parameters->{'old_allowed_users'       };
+    my $new_allowed_users        = $parameters->{'new_allowed_users'       };
+
+    my $old_allowed_prs          = $parameters->{'old_allowed_prs'         };
+    my $new_allowed_prs          = $parameters->{'new_allowed_prs'         };
+
+    my $old_message              = $parameters->{'old_message'             }
+                                 || $EMPTY_STR;
+    my $new_message              = $parameters->{'new_message'             }
+                                 || $EMPTY_STR;
+
+    my $old_status               = $parameters->{'old_status'              }
+                                 || $EMPTY_STR;
+    my $new_status               = $parameters->{'new_status'              }
+                                 || $EMPTY_STR;
+
+    my $old_state                = $parameters->{'old_state'               }
+                                 || $EMPTY_STR;
+    my $new_state                = $parameters->{'new_state'               }
+                                 || $EMPTY_STR;
+
+    # Detect Changes.
+    my $changes = {};
+
+    if (defined $old_users_who_can_edit && defined $new_users_who_can_edit) {
+        my ($added_users_who_can_edit, $removed_users_who_can_edit)
+            = Branch::Locker::get_added_and_removed_values(
+                $old_users_who_can_edit, $new_users_who_can_edit
+        );
+
+        $changes->{'add-gate-keepers'} = $added_users_who_can_edit
+            if (scalar @$added_users_who_can_edit);
+
+        $changes->{'remove-gate-keepers'} = $removed_users_who_can_edit
+            if (scalar @$removed_users_who_can_edit);
+    }
+
+    if (defined $old_allowed_users && defined $new_allowed_users) {
+        my ($added_allowed_users, $removed_allowed_users)
+            = Branch::Locker::get_added_and_removed_values(
+                $old_allowed_users, $new_allowed_users
+        );
+
+        $changes->{'add-users'} = $added_allowed_users
+            if (scalar @$added_allowed_users);
+
+        $changes->{'remove-users'} = $removed_allowed_users
+            if (scalar @$removed_allowed_users);
+    }
+
+    if (defined $old_allowed_prs && defined $new_allowed_prs) {
+        my ($added_allowed_prs, $removed_allowed_prs)
+            = Branch::Locker::get_added_and_removed_values(
+                $old_allowed_prs, $new_allowed_prs
+        );
+
+        $changes->{'add-prs'} = $added_allowed_prs
+            if (scalar @$added_allowed_prs);
+
+        $changes->{'remove-prs'} = $removed_allowed_prs
+            if (scalar @$removed_allowed_prs);
+    }
+
+    if ($old_message ne $new_message) {
+        $new_message =~ s/\r//g;
+        $changes->{'replace-message'} = $new_message;
+    }
+
+    $changes->{'set-status'     } = $new_status  if ($old_status  ne $new_status );
+    $changes->{'set-state'      } = $new_state   if ($old_state   ne $new_state  );
+
+    if (scalar keys %$changes) {
+        $changes->{'as-user'} = $user;
+
+        my $locks_ref = Branch::Locker::get_locks({ 'lock_id' => $from_lock_id });
+        my $audit_transaction = Branch::Locker::edit_locks(
+            $api_key_ref,
+            $locks_ref,
+            $changes,
+        );
+
+        if (exists $audit_transaction->{'errors'}) {
+            $c->stash->{'errors'} = $audit_transaction->{'errors'};
+        }
+        else {
+            $c->stash->{'messages'} = 'Edit successful.';
+        }
+    }
+    else {
+        $c->stash->{'messages'} = 'No changes submitted.';
+    }
+
+    if ($parameters->{'from_edit_enforcement'}) {
+        edit_enforcement(@_);
+    }
+    elsif ($parameters->{'from_edit_lock'}) {
+        BranchLocker::Controller::EditLock::edit_lock(@_);
+    }
+    else {
+        BranchLocker::Controller::Lock::lock(@_);
+    }
+}
 
 __PACKAGE__->meta->make_immutable;
 
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/EditLock.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/EditLock.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/EditLock.pm	2016-02-19 17:05:05.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/EditLock.pm	2016-01-11 17:06:18.000000000 -0800
@@ -1,8 +1,5 @@
-package BranchLocker::Controller::EditLock;
-use Moose;
-use namespace::autoclean;
 
-BEGIN { extends 'Catalyst::Controller'; }
+=encoding utf8
 
 =head1 NAME
 
@@ -12,35 +9,111 @@ BranchLocker::Controller::EditLock - Cat
 
 Catalyst Controller.
 
-=head1 METHODS
-
-=cut
-
+=head1 AUTHOR
 
-=head2 index
+Justin Bellomi
 
-=cut
+=head1 LICENSE
 
-sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
 
-    $c->response->body('Matched BranchLocker::Controller::EditLock in EditLock.');
-}
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
+=cut
 
+package BranchLocker::Controller::EditLock;
+use Moose;
+use namespace::autoclean;
 
-=encoding utf8
+BEGIN { extends 'Catalyst::Controller'; }
 
-=head1 AUTHOR
+my $EMPTY_STR = q{};
 
-Justin Bellomi
+=head1 METHODS
 
-=head1 LICENSE
+=cut
 
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
+sub edit_lock :Global {
+    my ($self, $c) = @_;
 
-=cut
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user;
+    my $is_readonly = $c->is_readonly;
+    my $parameters  = $c->req->parameters;
+
+    if (! exists $parameters->{'id'}) {
+        $c->response->redirect($c->uri_for('/'));
+        $c->detach;
+    }
+
+    if ($c->is_readonly) {
+        $c->stash->{'messages'} = 'Branch Locker is now in read only mode.';
+        BranchLocker::Controller::Lock::lock(@_);
+        $c->detach;
+    }
+
+    my $locks_ref = Branch::Locker::get_locks({ 'lock_id' => $parameters->{'id'} });
+    my @locks = @$locks_ref;
+    my $lock_ref = $locks[0];
+
+    my $enforcements_ref = Branch::Locker::get_enforcements_from_lock($lock_ref);
+
+    my $user_can_edit   = undef;
+    my $user_can_enable = undef;
+
+    # User only needs to be able to edit one enforcement to be able to change
+    # edit the lock data.
+    # User only needs to be able to enable one enforcement to be able to
+    # attempt to change the status.
+    foreach my $enforcement_ref (@$enforcements_ref) {
+        # Can the user edit the enforcement?
+        # We don't care about the errors here.
+        $user_can_edit = Branch::Locker::can_edit_enforcement_as_user(
+            $enforcement_ref,
+            $user,
+            [],
+        ) if (! $user_can_edit);
+
+        # Can the user enable the enforcement?
+        # We don't care about the errors here.
+        $user_can_enable = Branch::Locker::can_enable_enforcement_as_user(
+            $enforcement_ref,
+            $user,
+            [],
+        ) if (! $user_can_enable);
+    }
+
+    my $user_is_admin = Branch::Locker::is_user_an_admin($user);
+
+    my $can_edit   = $user_can_edit   ? $EMPTY_STR : 'disabled';
+    my $can_enable = $user_can_enable ? $EMPTY_STR : 'disabled';
+    my $admin_only = $user_is_admin   ? $EMPTY_STR : 'disabled';
+
+    my $can_submit = $user_can_edit || $user_can_enable
+                   ? $EMPTY_STR
+                   : 'disabled'
+                   ;
+
+    $c->stash->{'can_edit'    } = $can_edit;
+    $c->stash->{'can_enable'  } = $can_enable;
+    $c->stash->{'admin_only'  } = $admin_only;
+    $c->stash->{'can_submit'  } = $can_submit;
+    $c->stash->{'lock'        } = $lock_ref;
+    $c->stash->{'id'          } = $parameters->{'id'};
+    $c->stash->{'template'    } = 'edit-lock.tt2';
+}
 
 __PACKAGE__->meta->make_immutable;
 
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Hello.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Hello.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Hello.pm	2016-02-19 17:05:11.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Hello.pm	2016-01-11 17:06:35.000000000 -0800
@@ -1,8 +1,26 @@
-package BranchLocker::Controller::Hello;
-use Moose;
-use namespace::autoclean;
 
-BEGIN { extends 'Catalyst::Controller'; }
+=encoding utf8
+
+=head1 AUTHOR
+
+Justin Bellomi
+
+=head1 LICENSE
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
 =head1 NAME
 
@@ -12,36 +30,30 @@ BranchLocker::Controller::Hello - Cataly
 
 Catalyst Controller.
 
+=cut
+
+package BranchLocker::Controller::Hello;
+use Moose;
+use namespace::autoclean;
+
+BEGIN { extends 'Catalyst::Controller'; }
+
 =head1 METHODS
 
 =cut
 
-
 =head2 index
 
 =cut
 
-sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+sub hello :Global {
+    my ($self, $c, @args) = @_;
 
-    $c->response->body('Matched BranchLocker::Controller::Hello in Hello.');
+    my $word = $args[0] || $c->config->{'word'};
+    $c->stash->{'template'} = 'hello.tt2';
+    $c->stash->{'word'    } = $word;
 }
 
-
-
-=encoding utf8
-
-=head1 AUTHOR
-
-Justin Bellomi
-
-=head1 LICENSE
-
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
-
-=cut
-
 __PACKAGE__->meta->make_immutable;
 
 1;
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Lock.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Lock.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Lock.pm	2016-02-19 17:05:15.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Lock.pm	2016-01-11 17:06:51.000000000 -0800
@@ -1,46 +1,165 @@
-package BranchLocker::Controller::Lock;
-use Moose;
-use namespace::autoclean;
-
-BEGIN { extends 'Catalyst::Controller'; }
 
-=head1 NAME
+=encoding utf8
 
-BranchLocker::Controller::Lock - Catalyst Controller
+=head1 AUTHOR
 
-=head1 DESCRIPTION
+Justin Bellomi
 
-Catalyst Controller.
+=head1 LICENSE
 
-=head1 METHODS
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
 
-=cut
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
+=head1 NAME
 
-=head2 index
+BranchLocker::Controller::Lock - Catalyst Controller
 
-=cut
+=head1 DESCRIPTION
 
-sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+Catalyst Controller.
 
-    $c->response->body('Matched BranchLocker::Controller::Lock in Lock.');
-}
+=cut
 
+package BranchLocker::Controller::Lock;
+use Moose;
+use namespace::autoclean;
 
+BEGIN { extends 'Catalyst::Controller'; }
 
-=encoding utf8
+=head1 METHODS
 
-=head1 AUTHOR
+=cut
 
-Justin Bellomi
+sub lock :Global {
+    my ($self, $c) = @_;
 
-=head1 LICENSE
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user;
+    my $is_readonly = $c->is_readonly;
+
+    my $lock_id = $c->req->parameters->{'id'    };
+    my $branch  = $c->req->parameters->{'branch'};
+
+    my $criteria_ref = {};
+    if (defined $lock_id) {
+        $criteria_ref->{'lock_id'} = $lock_id;
+    }
+
+    elsif (defined $branch) {
+        $criteria_ref->{'branch'} = $branch;
+    }
+
+    else {
+        $c->response->redirect($c->uri_for('/'));
+        $c->detach;
+    }
+ 
+    my $locks_ref = Branch::Locker::get_locks($criteria_ref);
+
+    my @locks = @$locks_ref;
+    my $lock = $locks[0];
+
+    my $lock_locations_ref = Branch::Locker::get_locations_from_locks($lock);
+    my $locations_ref = [];
+    my $locations_hash_ref = {};
+
+    foreach my $location_ref (@$lock_locations_ref) {
+        my $repository = $location_ref->{'repository'};
+        my $array_ref = $locations_hash_ref->{$repository};
+        if (! defined $array_ref) {
+            $array_ref = [];
+            $locations_hash_ref->{$repository} = $array_ref;
+        }
+
+        push(@$array_ref, $location_ref->{'path'});
+    }
+
+    foreach my $repository (sort keys %$locations_hash_ref) {
+        push(@$locations_ref, {
+            'repository' => $repository,
+            'paths'      => $locations_hash_ref->{$repository},
+        });
+    }
+
+    $lock->{'locations'} = $locations_ref;
+
+    my $lock_enforcements
+        = Branch::Locker::get_enforcements_from_lock($lock);
+
+    foreach my $enforcement (@$lock_enforcements) {
+        if ($enforcement->{'is_enabled'}) {
+            $enforcement->{'is_enabled_string'} = 'Yes';
+            $enforcement->{'toggle_string'    } = 'Disable';
+            $enforcement->{'enabled_class'    } = 'enabled';
+        }
+        else {
+            $enforcement->{'is_enabled_string'} = 'No';
+            $enforcement->{'toggle_string'    } = 'Enable';
+            $enforcement->{'enabled_class'    } = 'disabled';
+        }
+
+        # Can the user edit the enforcement?
+        # We don't care about the errors here.
+        my $can_edit_enforcement
+            = Branch::Locker::can_edit_enforcement_as_user(
+                $enforcement,
+                $user,
+                [],
+            );
+
+        $enforcement->{'can_edit'} = 1 if (
+            ! $is_readonly && $can_edit_enforcement
+        );
+
+        # Can the user enable the enforcement?
+        # We don't care about the errors here.
+        my $can_enable_enforcement
+            = Branch::Locker::can_enable_enforcement_as_user(
+                $enforcement,
+                $user,
+                [],
+            );
+
+        $enforcement->{'can_enable'} = 1 if (
+            ! $is_readonly && $can_enable_enforcement
+        );
+
+        $lock->{'can_edit'} = 1 if ($enforcement->{'can_edit'});
+    }
+
+    $lock->{'enforcements'} = $lock_enforcements;
+
+    # Setup request to change gatekeepers email.
+    if (! Branch::Locker::is_user_an_admin($user)) {
+        my $gate_keeper_admin_email = $c->config->{'gate_keeper_admin_email'};
+        my $subject = "Gatekeeper change request for $lock->{'name'}";
+        my $body = 'WARNING:%20THIS%20SHOULD%20NOT%20BE%20USED%20TO%20REQUEST%20COMMIT%20ACCESS.%0D%0AEmail%20Subject%20line%20defaults%20to%20Branch%20name.%0D%0APlease%20add%20PR%20number(s)%20being%20requested%20after%20branch%20name.%0D%0A';
+
+        my $email_link
+            = 'mailto:'    . $gate_keeper_admin_email
+            . '?subject='  . $subject
+            . '&body=' . $body
+            ;
 
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
+        $lock->{'request_change'} = $email_link;
+    }
 
-=cut
+    $c->stash->{'lock'    } = $lock;
+    $c->stash->{'template'} = 'lock.tt2';
+}
 
 __PACKAGE__->meta->make_immutable;
 
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Root.pm bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Root.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/Controller/Root.pm	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/Controller/Root.pm	2016-01-12 17:40:47.000000000 -0800
@@ -1,3 +1,36 @@
+=encoding utf-8
+
+=head1 NAME
+
+BranchLocker::Controller::Root - Root Controller for BranchLocker
+
+=head1 DESCRIPTION
+
+A web app that controls branch based development write access.
+
+=head1 AUTHOR
+
+Justin Bellomi
+
+=head1 LICENSE
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+=cut
+
 package BranchLocker::Controller::Root;
 use Moose;
 use namespace::autoclean;
@@ -10,18 +43,10 @@ BEGIN { extends 'Catalyst::Controller' }
 #
 __PACKAGE__->config(namespace => '');
 
-=encoding utf-8
-
-=head1 NAME
-
-BranchLocker::Controller::Root - Root Controller for BranchLocker
-
-=head1 DESCRIPTION
-
-[enter your description here]
-
 =head1 METHODS
 
+=cut
+
 =head2 index
 
 The root page (/)
@@ -29,10 +54,93 @@ The root page (/)
 =cut
 
 sub index :Path :Args(0) {
-    my ( $self, $c ) = @_;
+    my ($self, $c) = @_;
 
-    # Hello World
-    $c->response->body( $c->welcome_message );
+    #$c->response->body( $c->welcome_message );
+    my $gui_api_key = $c->config->{'gui_api_key'};
+    my $api_key_ref = $c->validate_api_key($gui_api_key);
+    my $user        = $c->get_user();
+    my $tables      = [];
+
+    my $editable_locks = Branch::Locker::get_locks({
+        'gate_keeper' => $user,
+        'state'       => 'Active',
+    });
+
+    if (scalar @$editable_locks) {
+        my @sorted_locks = sort { $a->{'name'} cmp $b->{'name'} } @$editable_locks;
+        push (@$tables, {
+            'label' => "Locks Editable by: '$user'",
+            'locks' => \@sorted_locks,
+        });
+    }
+
+    my $locks_ref = Branch::Locker::get_locks({
+        'state' => 'Active',
+    });
+
+    my $grouped_ref = {};
+    my @locks = sort { $a->{'name'} cmp $b->{'name'} } @$locks_ref;
+
+    my @release_types = (
+        '',
+        'Production',
+        'Integration',
+        'Service',
+        'Development',
+    );
+
+    my $release_mapping = {
+        'Production'  => 'Production',
+        'Feature'     => 'Production',
+        'Release'     => 'Production',
+        'Service'     => 'Service',
+        'Exception'   => 'Service',
+        'Development' => 'Development',
+        'Integration' => 'Integration',
+    };
+
+    foreach my $lock_ref (@locks) {
+        my $group_name = $release_mapping->{ $lock_ref->{'grouped'} } || q{};
+        my $array_ref  = $grouped_ref->{$group_name};
+        if (! defined $array_ref) {
+            $array_ref = [];
+            $grouped_ref->{$group_name} = $array_ref;
+        }
+
+        push(@$array_ref, $lock_ref)
+            if ($lock_ref->{'name'} ne 'SVN_ADMIN_BRANCH');
+    }
+
+    foreach my $group_name (@release_types) {
+        my $push_tables = Branch::Locker::is_user_an_admin($user);
+        my $grouped_locks = $grouped_ref->{$group_name} || [];
+        $push_tables = 1
+            if (defined $group_name && $group_name ne q{});
+
+        push (@$tables, {
+            'label' => $group_name,
+            'locks' => $grouped_locks,
+        }) if ($push_tables && scalar @$grouped_locks);
+    }
+
+    # Add email link
+    foreach my $table_ref (@$tables) {
+        my $table_locks = $table_ref->{'locks'};
+        foreach my $lock_ref (@$table_locks) {
+            my $lock_name = $lock_ref->{'name'};
+            my $gate_keepers = $lock_ref->{'gate_keepers'};
+            my $list_of_emails = $gate_keepers;
+            $list_of_emails =~ s/(?:^|[ ,])([^ ,]+)(?:[ ,]|$)/$1\@example.com,/g;
+            $list_of_emails =~ s/[ ,]+$//;
+            my $uri = "mailto:${list_of_emails}?Subject=$lock_name - PR ???? (please fill in)";
+            $lock_ref->{'email_gate_keepers'} = $uri;
+        }
+    }
+
+    $c->stash->{'release_types'} = \@release_types;
+    $c->stash->{'tables'       } = $tables;
+    $c->stash->{'template'     } = 'index.tt2';
 }
 
 =head2 default
@@ -43,7 +151,8 @@ Standard 404 error page
 
 sub default :Path {
     my ( $self, $c ) = @_;
-    $c->response->body( 'Page not found' );
+
+    $c->response->body('Page not found');
     $c->response->status(404);
 }
 
@@ -55,17 +164,6 @@ Attempt to render a view, if needed.
 
 sub end : ActionClass('RenderView') {}
 
-=head1 AUTHOR
-
-Justin Bellomi
-
-=head1 LICENSE
-
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
-
-=cut
-
 __PACKAGE__->meta->make_immutable;
 
 1;
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/View/HTML.pm bl-oss/web/BranchLocker/lib/BranchLocker/View/HTML.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker/View/HTML.pm	2016-02-19 17:05:31.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker/View/HTML.pm	2016-01-11 17:07:58.000000000 -0800
@@ -1,19 +1,15 @@
-package BranchLocker::View::HTML;
-use Moose;
-use namespace::autoclean;
-
-extends 'Catalyst::View';
 
 =head1 NAME
 
-BranchLocker::View::HTML - Catalyst View
+BranchLocker::View::HTML - Catalyst TTSite View
 
-=head1 DESCRIPTION
+=head1 SYNOPSIS
 
-Catalyst View.
+See L<BranchLocker>
 
+=head1 DESCRIPTION
 
-=encoding utf8
+Catalyst TTSite View.
 
 =head1 AUTHOR
 
@@ -21,11 +17,40 @@ Justin Bellomi
 
 =head1 LICENSE
 
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
 
 =cut
 
-__PACKAGE__->meta->make_immutable;
+package BranchLocker::View::HTML;
+
+use strict;
+use base 'Catalyst::View::TT';
+
+__PACKAGE__->config({
+    INCLUDE_PATH => [
+        BranchLocker->path_to('root', 'src'),
+        BranchLocker->path_to('root', 'lib')
+    ],
+    PRE_PROCESS        => 'config/main',
+    WRAPPER            => 'site/wrapper',
+    ERROR              => 'error.tt2',
+    TEMPLATE_EXTENSION => '.tt2',
+    TIMER              => 0,
+    render_die         => 1,
+});
 
 1;
+
diff -rup bl-oss-generated-src/web/BranchLocker/lib/BranchLocker.pm bl-oss/web/BranchLocker/lib/BranchLocker.pm
--- bl-oss-generated-src/web/BranchLocker/lib/BranchLocker.pm	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/lib/BranchLocker.pm	2016-01-12 18:22:02.000000000 -0800
@@ -1,3 +1,45 @@
+
+=encoding utf8
+
+=head1 NAME
+
+BranchLocker - Catalyst based application
+
+=head1 SYNOPSIS
+
+    script/branchlocker_server.pl
+
+=head1 DESCRIPTION
+
+Web app to help manage branch based write access.
+
+=head1 SEE ALSO
+
+L<BranchLocker::Controller::Root>, L<Catalyst>
+
+=head1 AUTHOR
+
+Justin Bellomi
+
+=head1 LICENSE
+
+Copyright (c) 2016, Juniper Networks Inc.
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+=cut
+
 package BranchLocker;
 use Moose;
 use namespace::autoclean;
@@ -18,6 +60,7 @@ use Catalyst::Runtime 5.80;
 
 use Catalyst qw/
     -Debug
+    Authentication
     ConfigLoader
     Static::Simple
 /;
@@ -45,33 +88,58 @@ __PACKAGE__->config(
 # Start the application
 __PACKAGE__->setup();
 
-=encoding utf8
-
-=head1 NAME
-
-BranchLocker - Catalyst based application
-
-=head1 SYNOPSIS
-
-    script/branchlocker_server.pl
-
-=head1 DESCRIPTION
-
-[enter your description here]
-
-=head1 SEE ALSO
-
-L<BranchLocker::Controller::Root>, L<Catalyst>
-
-=head1 AUTHOR
+sub get_user :Private {
+    my ($c) = @_;
+    my $debug_user  = $c->req->env->{'DEBUG_USER' } || $ENV{'DEBUG_USER' };
+    my $remote_user = $c->req->env->{'REMOTE_USER'} || $ENV{'REMOTE_USER'};
+
+    my $user = $debug_user || $remote_user || getpwuid($<);
+
+    return lc $user;
+}
+
+sub is_readonly :Private {
+    my ($c, $user) = @_;
+
+    $user = $c->get_user if (! defined $user);
+
+    my $config              = $c->config;
+    my $readonly            = $config->{'readonly'           };
+    my $readonly_exceptions = $config->{'readonly_exceptions'};
+    my %read_only_users = map { $_ => 1 } @$readonly_exceptions;
+
+    return ($readonly && ! exists $read_only_users{$user});
+}
+
+sub validate_api_key :Private {
+    my ($c, $api_key) = @_;
+
+    my $bl_config = $c->config->{'Branch::Locker'};
+    $Branch::Locker::readwrite_user   = $bl_config->{'readwrite_user'  };
+    $Branch::Locker::readwrite_pass   = $bl_config->{'readwrite_pass'  };
+    $Branch::Locker::readwrite_host   = $bl_config->{'readwrite_host'  };
+
+    $Branch::Locker::readonly_user    = $bl_config->{'readonly_user'   };
+    $Branch::Locker::readonly_pass    = $bl_config->{'readonly_pass'   };
+    my $databases                     = $bl_config->{'databases'       };
+    $Branch::Locker::database_servers = $bl_config->{'database_servers'};
+
+    my $api_key_ref = undef;
+
+    eval {
+        $api_key_ref = Branch::Locker::init({
+            'writable'  => 1,
+            'databases' => $databases,
+            'api_key'   => $api_key,
+        });
+    };
+
+    if ($@) {
+        my @errors = ('Errors initializing database connections.', $@);
+        $c->stash->{'errors'} = \@errors;
+    }
 
-Justin Bellomi
-
-=head1 LICENSE
-
-This library is free software. You can redistribute it and/or modify
-it under the same terms as Perl itself.
-
-=cut
+    return $api_key_ref;
+}
 
 1;
diff -rup bl-oss-generated-src/web/BranchLocker/t/01app.t bl-oss/web/BranchLocker/t/01app.t
--- bl-oss-generated-src/web/BranchLocker/t/01app.t	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/t/01app.t	2016-01-20 17:32:57.000000000 -0800
@@ -1,10 +1,36 @@
-#!/usr/bin/env perl
+#!/usr/bin/perl
+
+# 2016-01-20 - The above line was changed to #!/usr/bin/perl
+#     - justinb@juniper.net
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
+
 use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 
-ok( request('/')->is_success, 'Request should succeed' );
+# 2016-01-20 - Changed error message.
+#     - justinb@juniper.net
+
+ok(request('/')->is_success,
+    '/ should succeed'
+);
 
+# End Changes
 done_testing();
diff -rup bl-oss-generated-src/web/BranchLocker/t/02pod.t bl-oss/web/BranchLocker/t/02pod.t
--- bl-oss-generated-src/web/BranchLocker/t/02pod.t	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/t/02pod.t	2016-01-20 17:24:08.000000000 -0800
@@ -1,9 +1,34 @@
-#!/usr/bin/env perl
+#!/usr/bin/perl
+
+# 2016-01-20 - The above line was changed to #!/usr/bin/perl
+#     - justinb@juniper.net
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
 use Test::More;
 
-plan skip_all => 'set TEST_POD to enable this test' unless $ENV{TEST_POD};
+# 2016-01-20 - Changed the unless to negated if statement.  This is just a
+# preference.
+#     - justinb@juniper.net
+
+plan skip_all => 'set TEST_POD to enable this test' if (! $ENV{TEST_POD});
+
+# End Changes
 eval "use Test::Pod 1.14";
 plan skip_all => 'Test::Pod 1.14 required' if $@;
 
diff -rup bl-oss-generated-src/web/BranchLocker/t/03podcoverage.t bl-oss/web/BranchLocker/t/03podcoverage.t
--- bl-oss-generated-src/web/BranchLocker/t/03podcoverage.t	2016-02-19 16:55:40.000000000 -0800
+++ bl-oss/web/BranchLocker/t/03podcoverage.t	2016-01-20 17:35:03.000000000 -0800
@@ -1,9 +1,34 @@
-#!/usr/bin/env perl
+#!/usr/bin/perl
+
+# 2016-01-20 - The above line was changed to #!/usr/bin/perl
+#     - justinb@juniper.net
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
 use Test::More;
 
-plan skip_all => 'set TEST_POD to enable this test' unless $ENV{TEST_POD};
+# 2016-01-20 - Changed unless clause to be a negated if clause.
+#     This is a personal preference.
+#     - justinb@juniper.net
+
+plan skip_all => 'set TEST_POD to enable this test' if (! $ENV{TEST_POD});
+
+# End Changes.
 
 eval "use Test::Pod::Coverage 1.04";
 plan skip_all => 'Test::Pod::Coverage 1.04 required' if $@;
diff -rup bl-oss-generated-src/web/BranchLocker/t/controller_API.t bl-oss/web/BranchLocker/t/controller_API.t
--- bl-oss-generated-src/web/BranchLocker/t/controller_API.t	2016-02-19 17:04:48.000000000 -0800
+++ bl-oss/web/BranchLocker/t/controller_API.t	2016-01-20 17:35:41.000000000 -0800
@@ -1,10 +1,39 @@
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
-use Test::More;
 
+use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 use BranchLocker::Controller::API;
 
-ok( request('/api')->is_success, 'Request should succeed' );
+use JSON::Tiny 'decode_json';
+
+my %tests = (
+    '/api'              => { 'Need Help' => 'Help Needed' },
+    '/api/echo?foo=bar' => { 'foo' => 'bar' },
+);
+
+plan ('tests' => scalar keys %tests);
+foreach my $uri (keys %tests) {
+    my $expected  = $tests{$uri};
+    my $structure = decode_json (request($uri)->content);
+    is_deeply ($structure, $expected);
+}
+
 done_testing();
diff -rup bl-oss-generated-src/web/BranchLocker/t/controller_EditEnforcement.t bl-oss/web/BranchLocker/t/controller_EditEnforcement.t
--- bl-oss-generated-src/web/BranchLocker/t/controller_EditEnforcement.t	2016-02-19 17:04:57.000000000 -0800
+++ bl-oss/web/BranchLocker/t/controller_EditEnforcement.t	2016-01-14 06:16:27.000000000 -0800
@@ -1,10 +1,29 @@
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
-use Test::More;
 
+use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 use BranchLocker::Controller::EditEnforcement;
 
-ok( request('/editenforcement')->is_success, 'Request should succeed' );
+ok(request('/editenforcement')->is_success,
+    '/editenforcement should succeed'
+);
+
 done_testing();
diff -rup bl-oss-generated-src/web/BranchLocker/t/controller_EditLock.t bl-oss/web/BranchLocker/t/controller_EditLock.t
--- bl-oss-generated-src/web/BranchLocker/t/controller_EditLock.t	2016-02-19 17:05:05.000000000 -0800
+++ bl-oss/web/BranchLocker/t/controller_EditLock.t	2016-01-14 06:17:32.000000000 -0800
@@ -1,10 +1,29 @@
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
-use Test::More;
 
+use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 use BranchLocker::Controller::EditLock;
 
-ok( request('/editlock')->is_success, 'Request should succeed' );
+ok(request('/editlock')->is_success,
+    '/editlock should succeed'
+);
+
 done_testing();
diff -rup bl-oss-generated-src/web/BranchLocker/t/controller_Hello.t bl-oss/web/BranchLocker/t/controller_Hello.t
--- bl-oss-generated-src/web/BranchLocker/t/controller_Hello.t	2016-02-19 17:05:11.000000000 -0800
+++ bl-oss/web/BranchLocker/t/controller_Hello.t	2016-01-14 06:18:27.000000000 -0800
@@ -1,10 +1,29 @@
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
-use Test::More;
 
+use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 use BranchLocker::Controller::Hello;
 
-ok( request('/hello')->is_success, 'Request should succeed' );
+ok(request('/hello')->is_success,
+    '/hello should succeed'
+);
+
 done_testing();
diff -rup bl-oss-generated-src/web/BranchLocker/t/controller_Lock.t bl-oss/web/BranchLocker/t/controller_Lock.t
--- bl-oss-generated-src/web/BranchLocker/t/controller_Lock.t	2016-02-19 17:05:15.000000000 -0800
+++ bl-oss/web/BranchLocker/t/controller_Lock.t	2016-01-14 06:19:11.000000000 -0800
@@ -1,10 +1,28 @@
+
+# Copyright (c) 2016, Juniper Networks Inc.
+# All rights reserved.
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
 use strict;
 use warnings;
-use Test::More;
 
+use Test::More;
 
 use Catalyst::Test 'BranchLocker';
 use BranchLocker::Controller::Lock;
 
-ok( request('/lock')->is_success, 'Request should succeed' );
+ok(request('/lock')->is_success,
+    '/lock should succeed'
+);
 done_testing();
